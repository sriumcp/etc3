name: Build, test and push etc3 controller

on:
  push:
    # Publish `main` as Docker `latest` image.
    branches:
      - main

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

env:
  IMG: controller

jobs:
  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  test-docker-build-and-push:
    # Ensure test job passes before pushing image. Already done as part of make target, so ignoring.
    # needs: build-and-test
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.13
    - name: Run Kubernetes tools
      uses: stefanprodan/kube-tools@v1
      with:
        kubectl: 1.18.2
        kustomize: 3.5.5
    - name: Set up Kubebuilder 2.3.1
      run: |
        os=$(go env GOOS)
        arch=$(go env GOARCH)

        # download kubebuilder and extract it to tmp
        curl -L https://go.kubebuilder.io/dl/2.3.1/${os}/${arch} | tar -xz -C /tmp/

        # move to a long-term location and put it on your path
        # (you'll need to set the KUBEBUILDER_ASSETS env var if you put it somewhere else)
        sudo mv /tmp/kubebuilder_2.3.1_${os}_${arch} /usr/local/kubebuilder
        export PATH=$PATH:/usr/local/kubebuilder/bin
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - name: Build image
      run: DOCKER_BUILDKIT=1; make docker-build
    - name: Log into registry
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
    - name: Push image
      run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMG
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMG $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
